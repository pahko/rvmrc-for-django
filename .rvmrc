current_directory=$(pwd) # Save the current directory

while [ ! -e ".rvmrc" ]; do
    cd ..
done

light_green="\033[1;32m"
light_red="\033[1;32m"
disable="\033[0m"

activate_virtualenv() {
    echo -en $light_green
    echo -n "Activating virtualenv... "
    source bin/activate
    echo "Done."
    echo -en $disable
}

check_requirements() {
    echo -en $light_green
    echo -n "Checking requirements... "
    pip install --no-install --no-download -r "${directory}dev-requirements.txt" > /dev/null
    return_code=$?
    if [ $return_code == 1 ]; then
        echo "[NEED UPDATE]"
    else
        echo "[OK]"
    fi
    echo -en $disable
    return $return_code
}

install_requirements() {
    echo -en $light_green
    echo -n "Installing requirements... "
    echo -e $disable
    pip install -r "${directory}dev-requirements.txt"
    echo -en $light_green
    echo "Done."
    echo -en $disable
}

if [ -f bin/activate ]; then
    activate_virtualenv
else
    echo -en $light_green
    echo -n "Creating new virtual environment... "
    if type -P virtualenv &> /dev/null; then
        virtualenv . --no-site-packages > /dev/null
    elif type -P virtualenv2 &> /dev/null; then
        virtualenv2 . > /dev/null
    else
        echo -en $light_red
        echo "Please install virtualenv"
        echo -en $disable
        return
    fi
    echo "Done."
    echo -en $disable
    activate_virtualenv
fi

# find django project directory
manage_file=$(ls */manage.py)
directory=${manage_file%manage.py}

check_requirements
if [ $? == 1 ]; then
    install_requirements
fi

cd $current_directory # Go to initial destination directory

unset -f install_requirements
unset -f check_requirements
unset -f activate_virtualenv
